# -*- coding: utf-8 -*-
"""ConstitucionCL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16o28BB2_rHIK6ISqkYXVh1BanxAzNgo0
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

file_name = 'PROPUESTA_BORRADOR_CONSTITUCIONAL_140522.txt'
df = pd.read_fwf(file_name, sep=" ")
df.columns = ['text']

df['indigenas_count'] = df.text.str.count('indígena|Indígena')
df['estado_count'] = df.text.str.count('estado|Estado')
df['propiedad_count'] = df.text.str.count('propiedad|Propiedad')
df['libertad_count'] = df.text.str.count('libertad|Libertad')
df['derechos_count'] = df.text.str.count('derecho|derechos|Derecho|Derechos')
df['plurinacional_count'] = df.text.str.count('plurinacional|Plurinacional|plurinacionalidad|Plurinacionalidad')
df['familia_count'] = df.text.str.count('familia|familias|Familia|Familias')

list_columns = ['Indigena', 'Estado', 'Propiedad', 'Libertad', 'Derecho', 'Plurinacional', 'Familia']
total_words = df["text"].apply(lambda x: len(str(x).split(' '))).sum()

df_resumen = pd.DataFrame({
      'word': list_columns,
      'count': [
                df.indigenas_count.sum(), 
                df.estado_count.sum(), 
                df.propiedad_count.sum(), 
                df.libertad_count.sum(), 
                df.derechos_count.sum(),
                df.plurinacional_count.sum(),
                df.familia_count.sum()
              ]
})

def show_values(axs, orient="v", space=.01):
    def _single(ax):
        if orient == "v":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() / 2
                _y = p.get_y() + p.get_height() + (p.get_height()*0.01)
                value = '{:1.0f}'.format(p.get_height())
                ax.text(_x, _y, value, ha="center") 
        elif orient == "h":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() + float(space)
                _y = p.get_y() + p.get_height() - (p.get_height()*0.5)
                value = '{:1.0f}'.format(p.get_width())
                ax.text(_x, _y, value, ha="left")

    if isinstance(axs, np.ndarray):
        for idx, ax in np.ndenumerate(axs):
            _single(ax)
    else:
        _single(axs)

plt.figure(figsize=(14, 10))
df_resumen = df_resumen.sort_values(['count'], ascending=False).reset_index(drop=True)
p = sns.barplot(
    y="count", 
    x="word", 
    data=df_resumen,
    ci=None
)

p.set_xlabel("Grupos de Palabras", fontsize = 20)
p.set_ylabel("Ocurrencias", fontsize = 20)
p.set_title('Total de palabras NC: ' + str(total_words))

show_values(p)
plt.show()